/*********************************************************************

** Sassian - Utilities - Sprites **

About:
    
    Generates retina ready sprite sheets, using media queries to show
    either HD or SD images. 

    This takes care of your sprite png generation, background
    positioning, and general sprite techniques.


Usage:

    In _variables.scss define your sprites locations:

        $sprites: sprite-map("_icons/*.png");   
        $sprites2x: sprite-map("_icons2x/*.png"); 

    When ever you want to use a sprite, call the mixin as follows:

        @include retina-sprite(imageName); // utilities/retina-sprite.scss

    * Note *
    You don't need to put the file extension of the image, all your
    images should be .png.


Example:

    .logo {
        @include retina-sprite(logo);
    }

Outputs:

    .logo {
        height: 43px;
        width: 169px;
        background-image: url('../images/icons-s761a393945.png');
        background-position: 0 -202px;
        background-repeat: no-repeat;
        text-indent: -9999px;
        display: block;
    }

    @media (-webkit-min-device-pixel-ratio: 1.5),(min--moz-device-pixel-ratio: 1.5),(-o-min-device-pixel-ratio: 3 / 2),(min-device-pixel-ratio: 1.5) {

        .logo {
            background-image: url('../images/icons-2x-sfa1da7c4bf.png');
            background-position: 0 -98px;
            -webkit-background-size: 292px auto;
            -moz-background-size: 292px auto;
            -o-background-size: 292px auto;
            background-size: 292px auto;
        }
    }

*********************************************************************/

@mixin retina-sprite($name, $hover: false, $active: false) {
    @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active);
    text-indent: -9999px;
    display: block;
}

@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
    @if $dimensions == true {
        @include sprite-dimensions($sprites, $name);
    }
    background-image: sprite-url($sprites);
    background-position: sprite-position($sprites, $name, -$pad, -$pad);
    background-repeat: no-repeat;

    @if $hover == true {
        $name_hover: $name + _hover;
        &:hover {
            background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
        }
    }
    @if $active == true {
        $name_active: $name + _active;
        &:active {
            background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
        }
    }

    @if $pad > 0 {
        padding: $pad;
    }

    @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5) {
        & {
            $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
            background-image: sprite-url($sprites2x);
            background-position: nth($pos, 1) nth($pos, 2) / 2;
            @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);

            @if $hover == true {
                $name_hover: $name + _hover;
                &:hover{
                    $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
                    background-position: nth($pos, 1) nth($pos, 2) / 2;
                }
            }
            @if $active == true {
                $name_active: $name + _active;
                &:active{
                    $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
                    background-position: nth($pos, 1) nth($pos, 2) / 2;
                }
            }
        }
    }
}